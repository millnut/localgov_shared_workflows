name: Test localgovdrupal drupal-module

on:
  workflow_call:
    inputs:
      project:
        description: 'LocalGov Drupal module name'
        required: true
        type: string
      project_path:
        description: 'LocalGov Drupal module path'
        required: true
        type: string

jobs:
  build:
    name: Install LocalGov Drupal
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        localgov-version:
          - '3.x'
        drupal-version:
          - '~10.0'
        php-version:
          - '8.1'
          - '8.2'
          - '8.3'

    steps:
      - name: Running
        run: |
          echo ${{inputs.project}}
          echo ${{inputs.project_path}}

      - name: Save git branch and git repo names to env if this is not a pull request
        if: github.event_name != 'pull_request'
        run: |
          echo "GIT_BASE=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "HEAD_USER=localgovdrupal" >> $GITHUB_ENV

      - name: Save git branch and git repo names to env if this is a pull request
        if: github.event_name == 'pull_request'
        run: |
          echo "GIT_BASE=${GITHUB_BASE_REF}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          export HEAD="${{ github.event.pull_request.head.label }}"
          echo "HEAD_USER=${HEAD%%:*}" >> $GITHUB_ENV

      - name: Set composer branch reference for version branches
        if: endsWith(github.ref, '.x')
        run: echo "COMPOSER_REF=${GIT_BRANCH}-dev" >> $GITHUB_ENV

      - name: Set composer branch reference for non-version branches
        if: endsWith(github.ref, '.x') == false
        run: echo "COMPOSER_REF=dev-${GIT_BRANCH}" >> $GITHUB_ENV

      - name: Get the latest tagged release for branch version
        run: |
          LATEST_RELEASE=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${GITHUB_REPOSITORY}/git/matching-refs/tags/${GIT_BASE%'.x'} | grep -Po '(?<=refs/tags/)[^"]+' | tail -1)
          if [ -z $LATEST_RELEASE ]; then LATEST_RELEASE=1; fi
          echo "LATEST_RELEASE=${LATEST_RELEASE}" >> $GITHUB_ENV

      - name: Cached workspace
        uses: actions/cache@v2
        with:
          path: ./html
          key: localgov-build-${{ matrix.localgov-version }}-${{ matrix.drupal-version }}-${{ matrix.php-version }}-${{ github.run_id }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Clone drupal_container
        uses: actions/checkout@v4
        with:
          repository: localgovdrupal/drupal-container
          ref: php${{ matrix.php-version }}

      - name: Create LocalGov Drupal project
        run: |
          composer create-project --stability dev --no-install localgovdrupal/localgov-project ./html "${{ matrix.localgov-version }}"
          composer --working-dir=./html require --no-install localgovdrupal/localgov:${{ matrix.localgov-version }}-dev
          composer --working-dir=./html require --no-install drupal/core-recommended:${{ matrix.drupal-version }} drupal/core-composer-scaffold:${{ matrix.drupal-version }} drupal/core-project-message:${{ matrix.drupal-version }} drupal/core-dev:${{ matrix.drupal-version }}
          composer --working-dir=./html install

      - name: Obtain the test target using Composer
        if: env.HEAD_USER == 'localgovdrupal'
        run: |
          composer --working-dir=html config repositories.1 vcs git@github.com:${{inputs.project}}.git
          composer global config github-oauth.github.com ${{ github.token }}
          composer --working-dir=./html require --with-all-dependencies ${{inputs.project}}:"${COMPOSER_REF} as ${LATEST_RELEASE}"

      - name: Obtain the test target using Git
        if: env.HEAD_USER != 'localgovdrupal'
        uses: actions/checkout@v4
        with:
          path: ${{inputs.project_path}}

      - name: Obtain suggested dependencies
        run: composer --working-dir=./html/${{inputs.project_path}} suggests --list | xargs composer --working-dir=./html require